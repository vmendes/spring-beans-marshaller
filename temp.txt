package gft;

import java.io.File;
import java.io.FileWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

public class GenerateSpringContext {
	
	private static SimpleDateFormat dateParser = new SimpleDateFormat("yyyy-MM-dd HH:mm");

	public static String generate(Object obj) {
		try {
			File file = new File(new Date().getTime() + ".xml");
			FileWriter writer = new FileWriter(file);
			String generateObject = generateObject(obj);
			writer.append(generateObject);
			writer.close();
			return generateObject;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	protected static String generateObject(Object object) throws Exception {
		
		StringBuilder builder = new StringBuilder();
		
		builder.append("<bean ");
		builder.append("class=\"");
		builder.append(object.getClass().getName());
		builder.append("\" >");
		
		
		Field[] declaredFields = object.getClass().getDeclaredFields();
		for (Field field : declaredFields) {
			if (!Modifier.isStatic(field.getModifiers())) {
				field.setAccessible(true);
				Object value = field.get(object);
				if (value instanceof Enum){
					builder.append(generateFieldEnum(field, (Enum) value));
				} else if (value instanceof Number) {
					builder.append(generateFieldNumber(field, (Number) value));
				} else if (value instanceof String) {
					builder.append(generateFieldString(field, (String) value));
				} else if (value instanceof List) {
					builder.append(generateFieldList(field, (List) value));
				} else if (value instanceof Date) {
					builder.append(generateFieldDate(field, (Date) value));
				} else if (value.getClass().isArray()) {
					builder.append(generateFieldArray(field, (Object[])value));
				} else {
					builder.append(generateFieldObject(field, value));
				}
			}
		}
		
		builder.append("</bean>");
		
		return builder.toString();
	}
	protected static String generateNumber(Number value) throws Exception {
		if (value != null) {
			return "<value type=\"" + value.getClass().getName() + "\">" + value + "</value>";
		} else {
			return "null";
		}
	}
	
	protected static String generateFieldObject(Field field, Object value) throws Exception {
		return "<property name=\"" + field.getName() + "\" >" + generate(value) + "</property>";
	}
	
	protected static String generateFieldNumber(Field field, Number value) throws Exception {
		return "<property name=\"" + field.getName() + "\" value=\"" + value + "\" />";
	}
	
	protected static String generateFieldString(Field field, String value) throws Exception {
		return "<property name=\"" + field.getName() + "\" value=\"" + value + "\" />";
	}
	
	protected static String generateFieldEnum(Field field, Enum value) throws Exception {
		return "<property name=\"" + field.getName() + "\" value=\"" + value + "\" />";
	}
	
	protected static String generateFieldDate(Field field, Date value) throws Exception {
		return "<property name=\"" + field.getName() + "\" >" +
				"<bean factory-bean=\"dateParser\" factory-method=\"parse\">" +
				"<constructor-arg value=\"" + dateParser.format(value) + "\" /></bean></property>";
	}
	
	protected static String generateFieldArray(Field field, Object[] value) throws Exception {
		return generateFieldList(field, Arrays.asList(value));
	}
	
	protected static String generateFieldList(Field field, List value) throws Exception {
		String output = "<property name=\"" + field.getName() + "\" ><list>";
		for (Object object : value) {
			if (object instanceof Number) {
				output += generateNumber((Number)object);
			} else {
				output += generateObject(object);
			}
		}
		output +="</list></property>";
		return output;
	}
	
}
